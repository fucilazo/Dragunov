import networkx as nx
import matplotlib.pyplot as plt

G = nx.krackhardt_kite_graph()  # 社会网络图Krackhardt Kite。是一种含有10个节点的虚拟图，常用于图的算法证明
nx.draw_networkx(G)
plt.show()

# 检查图的连通性
print(nx.has_path(G, source=1, target=9))               # 两个点是否连通
print(nx.shortest_path(G, source=1, target=9))          # 最短路径
print(nx.shortest_path_length(G, source=1, target=9))   # 最短路径长度
# ------------------------------------------------------------------------------------------------------
# 中介中心性
"""
这种类型的中心性以节点的最短路径数目表示节点的重要性。中介中心性高的节点是网络的核心组成部分，有很多最短路径用过中介中心性高的节点，
下列中，NetWorkX提供了一种直接的方法来计算所有节点的中介中心性
"""
print('中介中心性：\n', nx.betweenness_centrality(G))
# ------------------------------------------------------------------------------------------------------
# 度中心性
"""
一个节点的度中心性可以简单地理解为与本节点有直接联系的节点占其余节点总数的百分比。
需要注意的是，在有向图中每个节点有两个度中心性：入度中心性和出度中心性
"""
print('度中心性：\n', nx.degree_centrality(G))
# ------------------------------------------------------------------------------------------------------
# 接近中心性
"""
反映节点与其他节点之间的接近程度，可以按照如下步骤计算每个节点的接近中心性：
1.计算节点到其他节点最短路径的距离
2.取其平均值，将平均距离除以最长路径
3.取以上结果的倒数
接近中心性的取值范围是0（表示较大的平均距离）到1（表示较小的平均距离）
"""
print('接近中心性：\n', nx.closeness_centrality(G))
# ------------------------------------------------------------------------------------------------------
# 特征向量中心性
"""
如果图是有向图，用节点表示网页，边表示页面的链接。该图稍作修改就是著名的网页排名（PageRank）
如果把图当作一个马尔科夫链，图就表示与最大特征值对应的特征向量
因此从这个角度看，这种概率量表示访问一个节点的静态分布概率
"""
print('特征向量中心性：\n', nx.eigenvector_centrality(G))
# ------------------------------------------------------------------------------------------------------
# 聚集系数
"""
聚集系数表示节点的邻居节点的比例（即存在三元组或三角形的可能比例）。
聚集系数越高表示网络的小世界效应越高，之所以这样命名，是因为它表示了节点聚集在一起的程度
较高的聚集系数出现在图中具有高连通性的区域
较低的聚集系数出现在图中连通性低的区域
"""
print('聚集系数：\n', nx.clustering(G))
